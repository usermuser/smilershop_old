

###############################################################################################



#to send changes to remote server from local master branch.

git push remote_gor master - dont forget [git add .] and [git commit -m] before push

git pull remote_gor master - fetch changes from remote rep [remote_gor] and MERGE! - 


#Выполнение git pull, как правило, извлекает (fetch) данные с сервера (название remote_gor ветка master),
с которого вы изначально склонировали, и автоматически пытается #слить (merge) их с кодом,
над которым вы в данный момент работаете.


###############################################################################################


#add remote repository and name it (remote_gor)
git remote add remote_gor git@github.com:usermuser/apple_proj

#check remote reps
git remote -v

#check configuration list
git config --list
git status



###   http://eax.me/git-commands/   ###
#############################################################
Замерджить все ветки локального репозитория на удаленный репозиторий:
git push origin

Аналогично предыдущему, но делается пуш только ветки master:
git push origin master

Запушить текущую ветку, не вводя целиком ее название:
git push origin HEAD

Замерджить все ветки с удаленного репозитория:
git pull origin

Аналогично предыдущему, но накатывается только ветка master:
git pull origin master

Накатить текущую ветку, не вводя ее длинное имя:
git pull origin HEAD

Скачать все ветки с origin, но не мерджить их в локальный репозиторий:
git fetch origin

Аналогично предыдущему, но только для одной заданной ветки:
git fetch origin master


######################################################################33
##### ADDITIONAL GIT COMMANDS    3############################
#######################################################################

Начать работать с веткой some_branch (уже существующей):
git checkout -b some_branch origin/some_branch

Создать новый бранч (ответвится от текущего):
git branch some_branch

Переключиться на другую ветку (из тех, с которыми уже работаем):
git checkout some_branch

Получаем список веток, с которыми работаем:
git branch # звездочкой отмечена текущая ветвь

Просмотреть все существующие ветви:
git branch -a # | grep something

Замерджить some_branch в текущую ветку:
git merge some_branch

Удалить бранч (после мерджа):
git branch -d some_branch

Просто удалить бранч (тупиковая ветвь):
git branch -D some_branch

История изменений:
git log

История изменений в обратном порядке:
git log --reverse

История конкретного файла:
git log file.txt

Аналогично предыдущему, но с просмотром сделанных изменений:
git log -p file.txt

История с именами файлов и псевдографическим изображением бранчей:
git log --stat --graph

Изменения, сделанные в заданном коммите:
git show d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Посмотреть, кем в последний раз правилась каждая строка файла:
git blame file.txt

Удалить бранч из репозитория на сервере:
git push origin :branch-name

Откатиться к конкретному коммиту (хэш смотрим в «git log»):
git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Аналогично предыдущему, но файлы на диске остаются без изменений:
git reset --soft d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Попытаться обратить заданный commit (но чаще используется branch/reset + merge):
git revert d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4

Просмотр изменений (суммарных, а не всех по очереди, как в «git log»):
git diff # подробности см в "git diff --help"

Используем vimdiff в качестве программы для разрешения конфликтов (mergetool) по умолчанию:
git config --global merge.tool vimdiff

Отключаем диалог «какой mergetool вы хотели бы использовать»:
git config --global mergetool.prompt false

Разрешение конфликтов (когда оные возникают в результате мерджа):
git mergetool

Создание тэга:
git tag some_tag # за тэгом можно указать хэш коммита

Удаление untracked files:
git clean -f

«Упаковка» репозитория для увеличения скорости работы с ним:
git gc

Иногда требуется создать копию репозитория или перенести его с одной машины на другую. Это делается примерно так:
mkdir -p /tmp/git-copy
cd /tmp/git-copy
git clone --bare git@example.com:afiskon/cpp-opengl-tutorial1.git
cd cpp-opengl-tutorial1.git
git push --mirror git@example.com:afiskon/cpp-opengl-tutorial2.git